#!/bin/bash

# emba - EMBEDDED LINUX ANALYZER
#
# Copyright 2020-2021 Siemens AG
# Copyright 2020-2021 Siemens Energy AG
#
# emba comes with ABSOLUTELY NO WARRANTY. This is free software, and you are
# welcome to redistribute it under the terms of the GNU General Public License.
# See LICENSE file for usage of this software.
#
# emba is licensed under GPLv3
#
# Author(s): Michael Messner, Pascal Eckmann

# Description:  Iterate trough all binaries and check if these occurs in the CVE database
#               Access:
#                 firmware root path via $FIRMWARE_PATH
#                 binary array via ${BINARIES[@]}
export HTML_REPORT

S30_version_vulnerability_check() {
  module_log_init "${FUNCNAME[0]}"
  module_title "Binary Vulnerability Check"

  LOG_FILE="$( get_log_file )"

  # collect all vulns for aggregator
  S30_VUL_COUNTER=0

  if [[ $V_FEED -eq 1 ]]; then
    HTML_REPORT=1
    print_output "[*] Vulnerability database found!"
    echo

    for LINE in "${BINARIES[@]}"; do
      if (file "$LINE" | grep -q "ELF"); then

        local VULNS
        readarray -t VULNS < <(grep -i "\\s""$(basename "$LINE")""\\s" "$VUL_FEED_DB" | sed "s/\"\"//g" | cut -d\| -f1 | cut -d, -f1,3- | sed "s/,/   /" | cut -d\" -f1,2 | sed "s/\"//" 2>/dev/null)

        # if we found less than 10 vulnerabilities, we print it here:
        if [[ ${#VULNS[@]} -gt 0 ]] && [[ ${#VULNS[0]} -gt 0 ]]; then
          print_output "[+] Found ""${#VULNS[@]}"" possible vulnerabilities for ""$(basename "$LINE")"" [all versions]:\\n"
          for LINE_ in "${VULNS[@]:0:10}"; do
            print_vul "$LINE_"
          done
          (( S30_VUL_COUNTER="$S30_VUL_COUNTER"+"${#VULNS[@]}" ))
          echo
        fi
      fi
    done
    print_output "[+] Found $S30_VUL_COUNTER vulnerabilities in all binaries."
    LOG_FILE="$( get_log_file )"
    echo -e "\\n[*] Statistics:$S30_VUL_COUNTER" >> "$LOG_FILE"
  else
    print_output "[!] No vulnerability database found!"
  fi

  module_end_log "${FUNCNAME[0]}"
}

print_vul() {
  WIDTH="$(($(tput cols) - 16))"
  readarray -t TEXT_ARR <<<"$1"
  for TEXT in "${TEXT_ARR[@]}"; do
    FIRST_LINE="$(echo "$TEXT" | cut -c 1-"$(($(tput cols) - 2))")"
    LAST_LINES="$(echo "$TEXT" | cut -c "$(($(tput cols) - 1))"-)"

    readarray -t L_LINES < <(echo "$LAST_LINES" | sed -r "s/(.{""$WIDTH""})/&\n/g")

    print_output "$(echo "$FIRST_LINE" | sed -r '/^\s*$/d')"
    for E_LINE in "${L_LINES[@]}"; do
      if [[ -n "$E_LINE" ]]; then
        print_output "                ""$( echo "$E_LINE" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      fi
    done

    if [[ -f "$VUL_FEED_CVSS_DB" ]]; then
      CVSS_VALUES="$(grep "$(echo "$FIRST_LINE" | cut -d' ' -f 1)" "$VUL_FEED_CVSS_DB")"
      CVSS2="$(echo "$CVSS_VALUES" | cut -f 2 -d ",")"
      CVSS3="$(echo "$CVSS_VALUES" | cut -f 3 -d ",")"
      CVSS_STRING=""
      if ! [[ "$CVSS2" == *"null"* ]]; then
        # quick fix: unquote this - otherwise it will not work in the current docker setup
        # shellcheck disable=SC2086
        CVSS_VALUE="$(color_cvss2 $CVSS2)"
        CVSS_STRING="$CVSS_STRING""CVSS2: ""$CVSS_VALUE""   "
      fi
      if ! [[ "$CVSS3" == *"null"* ]]; then
        # quick fix: unquote this - otherwise it will not work in the current docker setup
        # shellcheck disable=SC2086
        CVSS_VALUE="$(color_cvss3 $CVSS3)"
        CVSS_STRING="$CVSS_STRING""CVSS3: ""$CVSS_VALUE"
      fi
      print_output "                ""$CVSS_STRING"
    fi

    echo
  done
}

color_cvss2() {
  CVSS="$1"
  if (( $(echo "$CVSS > 6.9" | bc -l) )); then
    echo "$MAGENTA""$CVSS""$NC"
  elif (( $(echo "$CVSS > 3.9" | bc -l) )); then
    echo "$ORANGE""$CVSS""$NC"
  else
    echo "$GREEN""$CVSS""$NC"
  fi
}

color_cvss3() {
  CVSS="$1"
  if (( $(echo "$CVSS > 8.9" | bc -l) )); then
    echo "$RED""$CVSS""$NC"
  elif (( $(echo "$CVSS > 6.9" | bc -l) )); then
    echo "$MAGENTA""$CVSS""$NC"
  elif (( $(echo "$CVSS > 3.9" | bc -l) )); then
    echo "$ORANGE""$CVSS""$NC"
  else
    echo "$GREEN""$CVSS""$NC"
  fi
}
